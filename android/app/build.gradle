apply plugin: 'com.android.application'
def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    compileSdkVersion 30
    defaultConfig {
        //applicationId "org.coolreader.knownreader"
        //applicationId "org.knownreader.premium"
        minSdkVersion 19
        targetSdkVersion 30
        multiDexEnabled true
        // When new version released, version code must be incremented at least by 8
        // for compatibility with ABI versioning of split apk (see below).
        versionCode 202204071
        versionName "2022.04.07.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static"
                cppFlags ""
            }
        }
        buildConfigField("String", "YND_ID", apikeyProperties['YND_ID'])
        buildConfigField("String", "YND_PASSW", apikeyProperties['YND_PASSW'])
        buildConfigField("String", "DBX_KEY", apikeyProperties['DBX_KEY'])
        buildConfigField("String", "DBX_SECRET", apikeyProperties['DBX_SECRET'])
        buildConfigField("String", "YND_TRANSLATE", apikeyProperties['YND_TRANSLATE'])
        buildConfigField("String", "LINGVO", apikeyProperties['LINGVO'])
        buildConfigField("String", "LITRES_APP", apikeyProperties['LITRES_APP'])
        buildConfigField("String", "LITRES_SECRET", apikeyProperties['LITRES_SECRET'])
    }

    flavorDimensions "version"

    productFlavors {
        free {
            dimension "version"
            buildConfigField "boolean", "GSUITE_AVAILABLE", "true"
            applicationId "org.coolreader.knownreader"
            manifestPlaceholders = [appLabel:"@string/app_name_free"]
        }
        premium {
            dimension "version"
            buildConfigField "boolean", "GSUITE_AVAILABLE", "true"
            applicationId "org.knownreader.premium"
            manifestPlaceholders = [appLabel:"@string/app_name_premium"]
        }
        fdroid {
            dimension "version"
            buildConfigField "boolean", "GSUITE_AVAILABLE", "false"
            applicationId "org.knownreader.fdroid"
            manifestPlaceholders = [appLabel:"@string/app_name_fdroid"]
        }
        experimental {
            dimension "version"
            buildConfigField "boolean", "GSUITE_AVAILABLE", "true"
            applicationId "com.onyx.org.knownreader.experimental"
            manifestPlaceholders = [appLabel:"@string/app_name_exp"]
        }
    }

    sourceSets {
        main {
            setRoot('src/main')
            aidl.srcDirs = ['../../android/src']
            java.srcDirs = ['../../android/src']
            res.srcDirs = ['../../android/res']
        }

        free {
            java.srcDirs = ['../../android/flavoured/free/src']
            res.srcDirs = ['../../android/flavoured/free/res']
            manifest.srcFile "../../android/flavoured/free/AndroidManifest.xml"
        }

        premium {
            java.srcDirs = ['../../android/flavoured/premium/src']
            res.srcDirs = ['../../android/flavoured/premium/res']
            manifest.srcFile "../../android/flavoured/premium/AndroidManifest.xml"
        }

        fdroid {
            java.srcDirs = ['../../android/flavoured/fdroid/src']
            res.srcDirs = ['../../android/flavoured/fdroid/res']
            manifest.srcFile "../../android/flavoured/fdroid/AndroidManifest.xml"
        }

        experimental {
            java.srcDirs = ['../../android/flavoured/experimental/src']
            res.srcDirs = ['../../android/flavoured/experimental/res']
            manifest.srcFile "../../android/flavoured/experimental/AndroidManifest.xml"
        }

    }
    buildTypes {
        release {
            // to make the bug report more readable.
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-optimize.pro'
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
                }
            }
            packagingOptions{
                doNotStrip "**/*.so"
            }
        }
        release_stripped {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-optimize.pro'
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Release"
                }
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            jniDebuggable true
            debuggable true
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Debug"
                }
            }
            packagingOptions{
                doNotStrip "**/*.so"
            }
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
    // https://developer.android.com/studio/build/configure-apk-splits
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }
     // map for the version code
    project.ext.abiCodes = [
            'armeabi': 1,
            'armeabi-v7a': 2,
            'arm64-v8a': 6,
            'mips': 3,
            'mips64': 7,
            'x86': 4,
            'x86_64': 5
    ]
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
            def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                // Variant 1: small version code increment for various ABI (old behaviour)
                output.versionCodeOverride = variant.versionCode + baseAbiVersionCode
                // Variant 2: big version code increment for various ABI
                //output.versionCodeOverride = variant.versionCode + 1000000*baseAbiVersionCode
            }
            def project = "KnownReader"
            def SEP = "_"
            def buildType = variant.buildType.name
            def version = variant.versionName
            def flavour = variant.getFlavorName().toUpperCase()
            def date = new Date();
            def formattedDate = date.format('yyyyMMdd_HHmm')
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi == null) abi = "universal"
            def newApkName = abi + SEP + formattedDate + SEP + project + SEP + version + SEP + buildType + SEP + flavour +".apk"
            output.outputFileName = newApkName
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        disable 'MissingTranslation'
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
//    ndkVersion '21.0.6113669'
//    useLibrary 'org.apache.http.legacy'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "androidx.documentfile:documentfile:1.0.1"

    // G Suite -> Google Drive API (only for free and premium flavor)
    freeImplementation 'com.google.android.gms:play-services-auth:18.1.0'
    freeImplementation 'com.google.http-client:google-http-client-gson:1.36.0'
    freeImplementation('com.google.api-client:google-api-client-android:1.30.10') {
        exclude group: 'org.apache.httpcomponents'
    }
    freeImplementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    premiumImplementation 'com.google.android.gms:play-services-auth:18.1.0'
    premiumImplementation 'com.google.http-client:google-http-client-gson:1.36.0'
    premiumImplementation('com.google.api-client:google-api-client-android:1.30.10') {
        exclude group: 'org.apache.httpcomponents'
    }
    premiumImplementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    experimentalImplementation 'com.google.android.gms:play-services-auth:18.1.0'
    experimentalImplementation 'com.google.http-client:google-http-client-gson:1.36.0'
    experimentalImplementation('com.google.api-client:google-api-client-android:1.30.10') {
        exclude group: 'org.apache.httpcomponents'
    }
    experimentalImplementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    //\
    implementation project(path: ':genrescollection')
    implementation project(path: ':eink-onyx-reflections')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    //implementation files('libs/LingvoIntegration_2.5.2.12.jar') // done via our own class
    implementation 'androidx.multidex:multidex:2.0.0'
    //implementation 'com.google.android.gms:play-services-identity:15.0.1' // hm, seems, that not needed (20220213)
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.github.deano2390:FlowTextView:2.0.5'
    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.11'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    //implementation files('libs/okhttp-3.12.3.jar')
    implementation 'com.squareup.okhttp3:okhttp:3.12.3'
    //implementation files('libs/okio-1.15.0.jar')
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    //implementation 'androidx.constraintlayout:constraintlayout:1.1.3' // what was it ? ...
    // directory chooser
    implementation 'com.github.guardian:Option:-SNAPSHOT'
    implementation 'net.rdrei.android.dirchooser:library:3.2@aar'
    implementation 'org.jsoup:jsoup:1.12.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.annotation:annotation:1.0.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation files('libs/commons.jar')
    implementation files('libs/OpenDocument.jar')
    //implementation files('libs/dsl4j-0.4.5-24-0fd0a0ac9b-SNAPSHOT.jar')
    implementation 'io.github.dictzip:dictzip:0.12.1'
    // for dsl4j
    implementation 'io.github.eb4j:dsl4j:0.5.0'
//    implementation 'commons-io:commons-io:2.11.0'
//    implementation 'io.github.eb4j:dsl4j:0.4.5-31-78c49a1bb9-SNAPSHOT'
//    implementation 'com.google.protobuf:protobuf-java:3.19.4'
//    implementation 'com.github.takawitter:trie4j:0.9.8'
    //\
    //implementation project(path: ':onyxsdk-device-1.2.5')
    //implementation 'com.onyx.android.sdk:onyxsdk-device:1.1.8'
    implementation 'com.onyx.android.sdk:onyxsdk-device:1.2.6'
}
